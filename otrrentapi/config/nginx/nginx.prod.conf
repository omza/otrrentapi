daemon off;

worker_processes 2;

user nginx;

# 'user nobody nobody;' for systems with 'nobody' as a group instead
#pid /usr/log/nginx.pid;
#error_log /usr/log/nginx.error.log;

events {
	worker_connections 1024; # increase if you have lots of clients
	accept_mutex off; # set to 'on' if nginx worker_processes > 1
	# 'use epoll;' to enable for Linux 2.6+
	# 'use kqueue;' to enable for FreeBSD, OSX
}

http {

	include /etc/nginx/mime.types;
	# fallback in case we can't determine a type
	default_type application/octet-stream;
  
	sendfile on;

	upstream app_server {
	# fail_timeout=0 means we always retry an upstream even if it failed
	# to return a good HTTP response

	# for UNIX domain socket setups
	server unix:/tmp/gunicorn.sock fail_timeout=0;

	# for a TCP configuration
	# server 192.168.0.7:8000 fail_timeout=0;
	}
	
    #server {
	#  # if no Host match, close the connection to prevent host spoofing
	#  listen 80 default_server;
	#  return 444;
	#}

	server {
		# use 'listen 80 deferred;' for Linux
		# use 'listen 80 accept_filter=httpready;' for FreeBSD
		listen 80;
		client_max_body_size 4G;

		# set the correct host(s) for your site
		server_name devdiboards.com;

		keepalive_timeout 5;

		#log
		access_log /usr/log/nginx.access.log;
		error_log /usr/log/nginx.error.log;

		#location /static/ {
		#    alias   /webapps/hello_django/static/;
		#}
    
		#location /media/ {
		#    alias   /webapps/hello_django/media/;
		#}

		location / {
			# an HTTP header important enough to have its own Wikipedia entry:
			#   http://en.wikipedia.org/wiki/X-Forwarded-For
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

			# enable this if and only if you use HTTPS, this helps Rack
			# set the proper protocol for doing redirects:
			# proxy_set_header X-Forwarded-Proto https;

			# pass the Host: header from the client right along so redirects
			# can be set properly within the Rack application
			proxy_set_header Host $http_host;

			# we don't want nginx trying to do something clever with
			# redirects, we set the Host: header above already.
			proxy_redirect off;

			# set "proxy_buffering off" *only* for Rainbows! when doing
			# Comet/long-poll stuff.  It's also safe to set if you're
			# using only serving fast clients with Unicorn + nginx.
			# Otherwise you _want_ nginx to buffer responses to slow
			# clients, really.
			# proxy_buffering off;

			# Try to serve static files from nginx, no p	oint in making an
			# *application* server like Unicorn/Rainbows! serve static files.
			if (!-f $request_filename) {
				proxy_pass http://app_server;
				break;
			}
		}

		# Error pages
		error_page 500 502 503 504 /500.html;
		location = /500.html {
			root /webapps/hello_django/static/;
		}
	}
}


